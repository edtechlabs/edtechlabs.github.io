{"version":3,"file":"static/js/924.af554eff.chunk.js","mappings":"mBAAO,IAAKA,EAA0B,SAA1BA,GAA0B,OAA1BA,EAA0B,UAA1BA,EAA0B,oCAA1BA,CAA0B,MAK1BC,EAAuB,SAAvBA,GAAuB,OAAvBA,EAAAA,EAAuB,qBAAvBA,EAAAA,EAAuB,iBAAvBA,CAAuB,MAKvBC,EAAmB,SAAnBA,GAAmB,OAAnBA,EAAAA,EAAmB,6BAAnBA,EAAAA,EAAmB,mBAAnBA,CAAmB,MAoBnBC,EAA4B,SAA5BA,GAA4B,OAA5BA,EAA4B,0BAA5BA,EAA4B,wCAA5BA,EAA4B,gCAA5BA,EAA4B,wDAA5BA,EAA4B,4BAA5BA,EAA4B,4BAA5BA,EAA4B,4BAA5BA,CAA4B,MC9BjC,MCgBDC,EACJ,0DAEIC,EACJ,0DAEF,IAAIC,EAEAC,EAA0DA,KAC5D,MAAM,IAAIC,MACR,2EACD,EAECC,EAA6CC,IAC/C,MAAMA,CAAK,EAEb,MAAMC,EAAyC,IAAIC,SACjD,CAACC,EAASC,KACRP,EAAqBM,EACrBJ,EAAoBK,CAAM,IAI9B,IAEIC,EAFAC,EAAQ,GAIRC,EAA6BA,OAC7BC,EAAmDA,OAEnDC,EAAmCA,OACnCC,EAAmCA,OAEvCC,KAAKC,UAAaC,IAChB,MAAM,KAAEC,GAASD,EAEjB,GAAIC,EAAKC,OAASzB,EAA2B0B,iBAgD3C,YA/CAf,EAAYgB,MAAMC,IAChBb,EAAiBS,EAAKT,eAEtB,MAAM,WAAEc,GAAeL,EACvBP,EAAiBA,KACfa,QAAQC,MACN,IAAIC,WAAWH,GACf,EACA5B,EAAwBgC,QACzB,EAEHf,EAAuCA,KACrCY,QAAQI,KACN,IAAIF,WAAWH,GACf,EACA5B,EAAwBgC,SAE1Bb,GAAsB,EAGxB,MAAM,gBAAEe,GAAoBX,EAC5BI,EAAQQ,mBAAmB,IAAIJ,WAAWG,IAC1ChB,EAAuBA,KACrBW,QAAQC,MACN,IAAIC,WAAWG,GACf,EACAjC,EAAoBmC,YACrB,EAEHjB,EAAuBA,KACrBQ,EAAQU,gBAAgB,EAG1BV,EAAQW,iBAAiB,KAAM,CAAC,GAChCX,EAAQW,iBAAiB,aAAc,CAAC,GACxCX,EAAQW,iBAAiB,gBAAiB,CACxCC,WAAYA,KACVC,GACE,IAAIC,aAAcC,OAAO,kBAADC,OD3FW,QC4FgB,iCAEpD,IAILC,EAAoB,CAAEpB,KAAMtB,EAA6B2C,aAAc,IAK3E,GAAItB,EAAKC,OAASzB,EAA2B+C,IA8E3C,OA7EA/B,EAAQ,GAERG,SAEAR,EAAYgB,MAAMC,IAAa,IAADoB,EAuB5B1C,EACsB,QADF0C,EAClB1C,SAAoB,IAAA0C,EAAAA,EACpB,MACE,MAAMC,EAAiBA,KACrB,MAAM,IAAIzC,MAAMJ,EAAwB,EAE1C6C,EAAeC,SAAW,IACxB,0CAEF,MAAMC,EAAiBA,KACrB,MAAM,IAAI3C,MAAMH,EAAwB,EAK1C,OAHA8C,EAAeD,SAAW,KACiB,EAEpCtB,EAAQwB,KAAK,CAClBC,KAAMJ,EACNK,KAAMH,GAET,EAjBD,GAmBF,IACE,MAAMI,EAAU/B,EAAKgC,oBACjB,CACEC,OAAQnD,EACRoD,QAASpD,GAEX,CAAC,EACLsB,EAAQ+B,UAAUnC,EAAKoC,KAAML,GAC7BV,EAAoB,CAClBpB,KAAMtB,EAA6B0D,oBAEvC,CAAE,MAAOnD,GACP,MAAMoD,EAAcC,OAAOrD,GAC3B,GACEoD,EAAYE,SAAS5D,IACrB0D,EAAYE,SAAS3D,GAKrB,YAHAwC,EAAoB,CAClBpB,KAAMtB,EAA6B8D,6BAKvCpB,EAAoB,CAClBpB,KAAMtB,EAA6B+D,eACnCJ,eAEJ,IAMoC,EAGzCzC,KAAa8C,cACa,8BAmC3B,SAASC,IACP,QAAuBC,IAAnBtD,EACF,MAAM,IAAIP,MAAM,4DAGlB,OAAa,CACX,MAAM8D,EAAsBtD,EAAMuD,QAAQ,MAC1C,IAA6B,IAAzBD,EAA4B,CAC9B,MAAME,EAAOxD,EAAMyD,MAAM,EAAGH,EAAsB,GAElD,OADAtD,EAAQA,EAAMyD,MAAMH,EAAsB,GACnCE,CACT,CAEAvD,IACA4B,EAAoB,CAAEpB,KAAMtB,EAA6BuE,eACzDxD,IAEA,MAAMyD,EAAa,IAAIC,YAAY7D,GAAgB,GAC7C8D,EAAgB,IAAIC,WAAW/D,EAAgB,EAAG4D,GAAYF,QACpE3C,QAAQC,MAAM,IAAI6C,YAAY7D,GAAiB,EAAG,GAClD,MAAMgE,GAAiB,IAAIC,aAAcC,OAAOJ,GAChD7D,GAAS+D,CACX,CACF,CAEA,SAAStC,EAAoByC,GAC3B,QAAuBb,IAAnBtD,EACF,MAAM,IAAIP,MACR,6DAIJ,MAAM2E,EAAeD,EAAOE,OAS5B,OAPAnE,IACA4B,EAAoB,CAClBpB,KAAMtB,EAA6BkF,aACnCH,WAEFhE,IAEOiE,CACT,CAEA,SAASG,EAAoBJ,GAC3B,QAAuBb,IAAnBtD,EACF,MAAM,IAAIP,MACR,6DAIJ,MAAM2E,EAAeD,EAAOE,OAS5B,OAPAnE,IACA4B,EAAoB,CAClBpB,KAAMtB,EAA6BoF,aACnCL,WAEFhE,IAEOiE,CACT,CAEA,SAAStC,EAAoB2C,GAC3BnE,KAAKoE,YAAYD,EACnB,EAxEAE,EAFmCrE,KAAaqE,eAElC/D,MAAMC,IAClBA,EAAQ+D,SAAS,CAAE3E,MAAOoD,IAC1BxC,EAAQgE,UAAU,CAAEC,MAAOpD,IAC3Bb,EAAQkE,UAAU,CAAED,MAAOP,IAC3B/E,EAAmBqB,EAAQ,GAC1BnB,E","sources":["workerMessage.ts","version.ts","workers/pyodideWorker.ts"],"sourcesContent":["export enum MessageToPyodideWorkerKind {\n  Run = \"run\",\n  SetSharedBuffers = \"setSharedBuffers\",\n}\n\nexport enum PyodideWorkerSignalCode {\n  Waiting = 0,\n  Ready = 1,\n}\n\nexport enum InterruptSignalCode {\n  NoInterrupt = 0,\n  Sigint = 2,\n}\n\nexport type MessageToPyodideWorker = RunMessage | SetSharedBuffersMessage;\n\nexport interface RunMessage {\n  readonly kind: MessageToPyodideWorkerKind.Run;\n  readonly code: string;\n  readonly overrideExitAndQuit: boolean;\n}\n\nexport interface SetSharedBuffersMessage {\n  readonly kind: MessageToPyodideWorkerKind.SetSharedBuffers;\n  readonly stdinBusBuffer: SharedArrayBuffer;\n  readonly waitBuffer: SharedArrayBuffer;\n  readonly interruptBuffer: SharedArrayBuffer;\n}\n\nexport enum MessageFromPyodideWorkerKind {\n  WorkerReady = \"workerReady\",\n  ExecutionSucceeded = \"executionSucceeded\",\n  ExecutionError = \"executionError\",\n  OverriddenExitOrQuitCalled = \"overriddenExitOrQuitCalled\",\n  StdinRequest = \"stdinRequest\",\n  StdoutUpdate = \"stdoutUpdate\",\n  StderrUpdate = \"stderrUpdate\",\n}\n\nexport type MessageFromPyodideWorker =\n  | WorkerReadyMessage\n  | ExecutionSucceededMessage\n  | ExecutionErrorMessage\n  | OverriddenExitOrQuitCalledMessage\n  | StdinRequestMessage\n  | StdoutUpdateMessage\n  | StderrUpdateMessage;\n\nexport interface WorkerReadyMessage {\n  readonly kind: MessageFromPyodideWorkerKind.WorkerReady;\n}\n\nexport interface ExecutionSucceededMessage {\n  readonly kind: MessageFromPyodideWorkerKind.ExecutionSucceeded;\n}\n\nexport interface ExecutionErrorMessage {\n  readonly kind: MessageFromPyodideWorkerKind.ExecutionError;\n  readonly errorString: string;\n}\n\nexport interface OverriddenExitOrQuitCalledMessage {\n  readonly kind: MessageFromPyodideWorkerKind.OverriddenExitOrQuitCalled;\n}\n\nexport interface StdinRequestMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StdinRequest;\n}\n\nexport interface StdoutUpdateMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StdoutUpdate;\n  readonly output: Uint8Array;\n}\n\nexport interface StderrUpdateMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StderrUpdate;\n  readonly output: Uint8Array;\n}\n","export const ONLINE_PYTHON_VERSION_WITHOUT_V = \"1.1.0\";\n","import type { PyodideInterface } from \"pyodide\";\nimport type { PyProxy } from \"pyodide/ffi\";\nimport {\n  InterruptSignalCode,\n  MessageFromPyodideWorker,\n  MessageFromPyodideWorkerKind,\n  MessageToPyodideWorker,\n  MessageToPyodideWorkerKind,\n  PyodideWorkerSignalCode,\n} from \"../workerMessage\";\nimport { ONLINE_PYTHON_VERSION_WITHOUT_V } from \"../version\";\n\nexport {};\n\n/* eslint-disable no-restricted-globals */\n\nconst OVERRIDDEN_EXIT_ERR_MSG =\n  \"exit() called. The default `exit` function is disabled.\";\n\nconst OVERRIDDEN_QUIT_ERR_MSG =\n  \"quit() called. The default `quit` function is disabled.\";\n\nlet exitAndQuitOverrides: undefined | PyProxy;\n\nlet resolvePyodideProm: (pyodide: PyodideInterface) => void = () => {\n  throw new Error(\n    \"resolvePyodideProm was called before it was set by the Promise callback.\"\n  );\n};\nlet rejectPyodideProm: (error: Error) => void = (error) => {\n  throw error;\n};\nconst pyodideProm: Promise<PyodideInterface> = new Promise(\n  (resolve, reject) => {\n    resolvePyodideProm = resolve;\n    rejectPyodideProm = reject;\n  }\n);\n\nlet stdin = \"\";\n\nlet stdinBusBuffer: undefined | SharedArrayBuffer;\n\nlet setWaitingFlag: () => void = () => {};\nlet waitUntilMainThreadUnsetsWaitingFlag: () => void = () => {};\n\nlet clearInterruptSignal: () => void = () => {};\nlet checkInterruptSignal: () => void = () => {};\n\nself.onmessage = (event: MessageEvent<MessageToPyodideWorker>): void => {\n  const { data } = event;\n\n  if (data.kind === MessageToPyodideWorkerKind.SetSharedBuffers) {\n    pyodideProm.then((pyodide) => {\n      stdinBusBuffer = data.stdinBusBuffer;\n\n      const { waitBuffer } = data;\n      setWaitingFlag = () => {\n        Atomics.store(\n          new Int32Array(waitBuffer),\n          0,\n          PyodideWorkerSignalCode.Waiting\n        );\n      };\n      waitUntilMainThreadUnsetsWaitingFlag = () => {\n        Atomics.wait(\n          new Int32Array(waitBuffer),\n          0,\n          PyodideWorkerSignalCode.Waiting\n        );\n        checkInterruptSignal();\n      };\n\n      const { interruptBuffer } = data;\n      pyodide.setInterruptBuffer(new Int32Array(interruptBuffer));\n      clearInterruptSignal = () => {\n        Atomics.store(\n          new Int32Array(interruptBuffer),\n          0,\n          InterruptSignalCode.NoInterrupt\n        );\n      };\n      checkInterruptSignal = () => {\n        pyodide.checkInterrupt();\n      };\n\n      pyodide.registerJsModule(\"js\", {});\n      pyodide.registerJsModule(\"pyodide_js\", {});\n      pyodide.registerJsModule(\"online_python\", {\n        print_info: () => {\n          handleStdoutRequest(\n            new TextEncoder().encode(\n              `Online Python v${ONLINE_PYTHON_VERSION_WITHOUT_V}\\nCopyright 2024 Kyle Lin.\\n`\n            )\n          );\n        },\n      });\n\n      typesafePostMessage({ kind: MessageFromPyodideWorkerKind.WorkerReady });\n    });\n    return;\n  }\n\n  if (data.kind === MessageToPyodideWorkerKind.Run) {\n    stdin = \"\";\n\n    clearInterruptSignal();\n\n    pyodideProm.then((pyodide) => {\n      // We need to override the `exit` and `quit` functions with\n      // our custom implementation.\n      // This is because the default `exit` and `quit` functions\n      // cause Pyodide to not process subsequent code execution requests correctly.\n      // Specifically, subsequent code execution requests will throw the error\n      // `TypeError: Cannot read properties of undefined (reading 'callKwargs')`.\n      //\n      // I don't know why this is.\n      // But in any case, it seems we must override the `exit` and `quit` functions\n      // to prevent this.\n      // If a future version of Pyodide fixes this issue, we can remove exitAndQuitOverrides.\n      //\n      // Our custom implementation of `exit` and `quit` will throw an error with a unique message.\n      // The problem with this is that the error message will be printed to the console,\n      // which is different then the expected behavior of `exit` and `quit`.\n      //\n      // So, in the `catch` clause of the `try` block that runs the user's code,\n      // we will check if the thrown error contains OVERRIDDEN_EXIT_ERR_MSG or OVERRIDDEN_QUIT_ERR_MSG.\n      // If it does, we send a OverriddenExitOrQuitCalledMessage  instead of an ExecutionErrorMessage.\n      // This allows the main thread to distinguish between the user calling `exit` or `quit` and an actual error.\n      // The main thread will only write to stderr in the latter case.\n\n      exitAndQuitOverrides =\n        exitAndQuitOverrides ??\n        ((): PyProxy => {\n          const overriddenExit = () => {\n            throw new Error(OVERRIDDEN_EXIT_ERR_MSG);\n          };\n          overriddenExit.toString = () =>\n            \"Use exit() or Ctrl-D (i.e. EOF) to exit\";\n\n          const overriddenQuit = () => {\n            throw new Error(OVERRIDDEN_QUIT_ERR_MSG);\n          };\n          overriddenQuit.toString = () => {\n            \"Use quit() or Ctrl-D (i.e. EOF) to exit\";\n          };\n          return pyodide.toPy({\n            exit: overriddenExit,\n            quit: overriddenQuit,\n          });\n        })();\n\n      try {\n        const options = data.overrideExitAndQuit\n          ? {\n              locals: exitAndQuitOverrides,\n              globals: exitAndQuitOverrides,\n            }\n          : {};\n        pyodide.runPython(data.code, options);\n        typesafePostMessage({\n          kind: MessageFromPyodideWorkerKind.ExecutionSucceeded,\n        });\n      } catch (error) {\n        const errorString = String(error);\n        if (\n          errorString.includes(OVERRIDDEN_EXIT_ERR_MSG) ||\n          errorString.includes(OVERRIDDEN_QUIT_ERR_MSG)\n        ) {\n          typesafePostMessage({\n            kind: MessageFromPyodideWorkerKind.OverriddenExitOrQuitCalled,\n          });\n          return;\n        }\n\n        typesafePostMessage({\n          kind: MessageFromPyodideWorkerKind.ExecutionError,\n          errorString,\n        });\n      }\n    });\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const _exhaustivenessCheck: never = data;\n};\n\n(self as any).importScripts(\n  process.env.PUBLIC_URL + \"/pyodide_0.26.1/pyodide.js\"\n);\n\nconst loadPyodide: (options?: {\n  indexURL?: string;\n  packageCacheDir?: string;\n  lockFileURL?: string;\n  fullStdLib?: boolean;\n  stdLibURL?: string;\n  stdin?: () => string;\n  stdout?: (msg: string) => void;\n  stderr?: (msg: string) => void;\n  jsglobals?: object;\n  args?: string[];\n  env?: {\n    [key: string]: string;\n  };\n  packages?: string[];\n  pyproxyToStringRepr?: boolean;\n  enableRunUntilComplete?: boolean;\n  _node_mounts?: string[];\n  _makeSnapshot?: boolean;\n  _loadSnapshot?:\n    | Uint8Array\n    | ArrayBuffer\n    | PromiseLike<Uint8Array | ArrayBuffer>;\n}) => Promise<PyodideInterface> = (self as any).loadPyodide;\n\nloadPyodide().then((pyodide) => {\n  pyodide.setStdin({ stdin: handleStdinRequest });\n  pyodide.setStdout({ write: handleStdoutRequest });\n  pyodide.setStderr({ write: handleStderrRequest });\n  resolvePyodideProm(pyodide);\n}, rejectPyodideProm);\n\nfunction handleStdinRequest(): string {\n  if (stdinBusBuffer === undefined) {\n    throw new Error(\"Called handleStdinRequest before stdinBusBuffer was set.\");\n  }\n\n  while (true) {\n    const indexOfFirstNewline = stdin.indexOf(\"\\n\");\n    if (indexOfFirstNewline !== -1) {\n      const line = stdin.slice(0, indexOfFirstNewline + 1);\n      stdin = stdin.slice(indexOfFirstNewline + 1);\n      return line;\n    }\n\n    setWaitingFlag();\n    typesafePostMessage({ kind: MessageFromPyodideWorkerKind.StdinRequest });\n    waitUntilMainThreadUnsetsWaitingFlag();\n\n    const byteLength = new Uint32Array(stdinBusBuffer)[0];\n    const newInputBytes = new Uint8Array(stdinBusBuffer, 4, byteLength).slice();\n    Atomics.store(new Uint32Array(stdinBusBuffer), 0, 0);\n    const newInputString = new TextDecoder().decode(newInputBytes);\n    stdin += newInputString;\n  }\n}\n\nfunction handleStdoutRequest(output: Uint8Array): number {\n  if (stdinBusBuffer === undefined) {\n    throw new Error(\n      \"Called handleStdoutRequest before stdinBusBuffer was set.\"\n    );\n  }\n\n  const outputLength = output.length;\n\n  setWaitingFlag();\n  typesafePostMessage({\n    kind: MessageFromPyodideWorkerKind.StdoutUpdate,\n    output,\n  });\n  waitUntilMainThreadUnsetsWaitingFlag();\n\n  return outputLength;\n}\n\nfunction handleStderrRequest(output: Uint8Array): number {\n  if (stdinBusBuffer === undefined) {\n    throw new Error(\n      \"Called handleStderrRequest before stdinBusBuffer was set.\"\n    );\n  }\n\n  const outputLength = output.length;\n\n  setWaitingFlag();\n  typesafePostMessage({\n    kind: MessageFromPyodideWorkerKind.StderrUpdate,\n    output,\n  });\n  waitUntilMainThreadUnsetsWaitingFlag();\n\n  return outputLength;\n}\n\nfunction typesafePostMessage(message: MessageFromPyodideWorker): void {\n  self.postMessage(message);\n}\n"],"names":["MessageToPyodideWorkerKind","PyodideWorkerSignalCode","InterruptSignalCode","MessageFromPyodideWorkerKind","OVERRIDDEN_EXIT_ERR_MSG","OVERRIDDEN_QUIT_ERR_MSG","exitAndQuitOverrides","resolvePyodideProm","Error","rejectPyodideProm","error","pyodideProm","Promise","resolve","reject","stdinBusBuffer","stdin","setWaitingFlag","waitUntilMainThreadUnsetsWaitingFlag","clearInterruptSignal","checkInterruptSignal","self","onmessage","event","data","kind","SetSharedBuffers","then","pyodide","waitBuffer","Atomics","store","Int32Array","Waiting","wait","interruptBuffer","setInterruptBuffer","NoInterrupt","checkInterrupt","registerJsModule","print_info","handleStdoutRequest","TextEncoder","encode","concat","typesafePostMessage","WorkerReady","Run","_exitAndQuitOverrides","overriddenExit","toString","overriddenQuit","toPy","exit","quit","options","overrideExitAndQuit","locals","globals","runPython","code","ExecutionSucceeded","errorString","String","includes","OverriddenExitOrQuitCalled","ExecutionError","importScripts","handleStdinRequest","undefined","indexOfFirstNewline","indexOf","line","slice","StdinRequest","byteLength","Uint32Array","newInputBytes","Uint8Array","newInputString","TextDecoder","decode","output","outputLength","length","StdoutUpdate","handleStderrRequest","StderrUpdate","message","postMessage","loadPyodide","setStdin","setStdout","write","setStderr"],"sourceRoot":""}