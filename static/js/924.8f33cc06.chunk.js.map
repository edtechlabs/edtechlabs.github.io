{"version":3,"file":"static/js/924.8f33cc06.chunk.js","mappings":"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","sources":["workerMessage.ts","version.ts","workers/pyodideWorker.ts"],"sourcesContent":["export enum MessageToPyodideWorkerKind {\n  Run = \"run\",\n  SetSharedBuffers = \"setSharedBuffers\",\n}\n\nexport enum PyodideWorkerSignalCode {\n  Waiting = 0,\n  Ready = 1,\n}\n\nexport enum InterruptSignalCode {\n  NoInterrupt = 0,\n  Sigint = 2,\n}\n\nexport type MessageToPyodideWorker = RunMessage | SetSharedBuffersMessage;\n\nexport interface RunMessage {\n  readonly kind: MessageToPyodideWorkerKind.Run;\n  readonly code: string;\n}\n\nexport interface SetSharedBuffersMessage {\n  readonly kind: MessageToPyodideWorkerKind.SetSharedBuffers;\n  readonly stdinBusBuffer: SharedArrayBuffer;\n  readonly waitBuffer: SharedArrayBuffer;\n  readonly interruptBuffer: SharedArrayBuffer;\n}\n\nexport enum MessageFromPyodideWorkerKind {\n  WorkerReady = \"workerReady\",\n  ExecutionSucceeded = \"executionSucceeded\",\n  ExecutionError = \"executionError\",\n  OverriddenExitCalled = \"overriddenExitCalled\",\n  StdinRequest = \"stdinRequest\",\n  StdoutUpdate = \"stdoutUpdate\",\n  StderrUpdate = \"stderrUpdate\",\n}\n\nexport type MessageFromPyodideWorker =\n  | WorkerReadyMessage\n  | ExecutionSucceededMessage\n  | ExecutionErrorMessage\n  | OverriddenExitCalledMessage\n  | StdinRequestMessage\n  | StdoutUpdateMessage\n  | StderrUpdateMessage;\n\nexport interface WorkerReadyMessage {\n  readonly kind: MessageFromPyodideWorkerKind.WorkerReady;\n}\n\nexport interface ExecutionSucceededMessage {\n  readonly kind: MessageFromPyodideWorkerKind.ExecutionSucceeded;\n}\n\nexport interface ExecutionErrorMessage {\n  readonly kind: MessageFromPyodideWorkerKind.ExecutionError;\n  readonly errorString: string;\n}\n\nexport interface OverriddenExitCalledMessage {\n  readonly kind: MessageFromPyodideWorkerKind.OverriddenExitCalled;\n}\n\nexport interface StdinRequestMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StdinRequest;\n}\n\nexport interface StdoutUpdateMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StdoutUpdate;\n  readonly output: Uint8Array;\n}\n\nexport interface StderrUpdateMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StderrUpdate;\n  readonly output: Uint8Array;\n}\n","export const KOJA_VERSION_WITHOUT_V = \"1.0.10\";\n","import type { PyodideInterface } from \"pyodide\";\nimport type { PyProxy } from \"pyodide/ffi\";\nimport {\n  InterruptSignalCode,\n  MessageFromPyodideWorker,\n  MessageFromPyodideWorkerKind,\n  MessageToPyodideWorker,\n  MessageToPyodideWorkerKind,\n  PyodideWorkerSignalCode,\n} from \"../workerMessage\";\nimport { KOJA_VERSION_WITHOUT_V } from \"../version\";\n\nexport {};\n\n/* eslint-disable no-restricted-globals */\n\nconst OVERRIDDEN_EXIT_ERR_MSG =\n  \"exit() called. The default `exit` function is disabled.\";\n\nlet resolvePyodideProm: (pyodide: PyodideInterface) => void = () => {\n  throw new Error(\n    \"resolvePyodideProm was called before it was set by the Promise callback.\"\n  );\n};\nlet rejectPyodideProm: (error: Error) => void = (error) => {\n  throw error;\n};\nconst pyodideProm: Promise<PyodideInterface> = new Promise(\n  (resolve, reject) => {\n    resolvePyodideProm = resolve;\n    rejectPyodideProm = reject;\n  }\n);\n\nlet stdin = \"\";\n\nlet stdinBusBuffer: undefined | SharedArrayBuffer;\n\nlet setWaitingFlag: () => void = () => {};\nlet waitUntilMainThreadUnsetsWaitingFlag: () => void = () => {};\n\nlet clearInterruptSignal: () => void = () => {};\nlet checkInterruptSignal: () => void = () => {};\n\nlet locals: undefined | PyProxy;\n\nself.onmessage = (event: MessageEvent<MessageToPyodideWorker>): void => {\n  const { data } = event;\n\n  if (data.kind === MessageToPyodideWorkerKind.SetSharedBuffers) {\n    pyodideProm.then((pyodide) => {\n      stdinBusBuffer = data.stdinBusBuffer;\n\n      const { waitBuffer } = data;\n      setWaitingFlag = () => {\n        Atomics.store(\n          new Int32Array(waitBuffer),\n          0,\n          PyodideWorkerSignalCode.Waiting\n        );\n      };\n      waitUntilMainThreadUnsetsWaitingFlag = () => {\n        Atomics.wait(\n          new Int32Array(waitBuffer),\n          0,\n          PyodideWorkerSignalCode.Waiting\n        );\n        checkInterruptSignal();\n      };\n\n      const { interruptBuffer } = data;\n      pyodide.setInterruptBuffer(new Int32Array(interruptBuffer));\n      clearInterruptSignal = () => {\n        Atomics.store(\n          new Int32Array(interruptBuffer),\n          0,\n          InterruptSignalCode.NoInterrupt\n        );\n      };\n      checkInterruptSignal = () => {\n        pyodide.checkInterrupt();\n      };\n\n      pyodide.registerJsModule(\"js\", {});\n      pyodide.registerJsModule(\"pyodide_js\", {});\n      pyodide.registerJsModule(\"koja\", {\n        print_info: () => {\n          handleStdoutRequest(\n            new TextEncoder().encode(\n              `Koja v${KOJA_VERSION_WITHOUT_V}\\nCopyright 2024 Kyle Lin.\\n`\n            )\n          );\n        },\n      });\n\n      typesafePostMessage({ kind: MessageFromPyodideWorkerKind.WorkerReady });\n    });\n    return;\n  }\n\n  if (data.kind === MessageToPyodideWorkerKind.Run) {\n    stdin = \"\";\n\n    clearInterruptSignal();\n\n    pyodideProm.then((pyodide) => {\n      locals =\n        locals ??\n        ((): PyProxy => {\n          const overriddenExit = () => {\n            throw new Error(OVERRIDDEN_EXIT_ERR_MSG);\n          };\n          overriddenExit.toString = () =>\n            \"Use exit() or Ctrl-D (i.e. EOF) to exit\";\n          return pyodide.toPy({\n            exit: overriddenExit,\n          });\n        })();\n\n      try {\n        pyodide.runPython(data.code, {\n          locals,\n        });\n        typesafePostMessage({\n          kind: MessageFromPyodideWorkerKind.ExecutionSucceeded,\n        });\n      } catch (error) {\n        if (String(error).includes(OVERRIDDEN_EXIT_ERR_MSG)) {\n          typesafePostMessage({\n            kind: MessageFromPyodideWorkerKind.OverriddenExitCalled,\n          });\n          return;\n        }\n\n        typesafePostMessage({\n          kind: MessageFromPyodideWorkerKind.ExecutionError,\n          errorString: String(error),\n        });\n      }\n    });\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const _exhaustivenessCheck: never = data;\n};\n\n(self as any).importScripts(\n  process.env.PUBLIC_URL + \"/pyodide_0.26.1/pyodide.js\"\n);\n\nconst loadPyodide: (options?: {\n  indexURL?: string;\n  packageCacheDir?: string;\n  lockFileURL?: string;\n  fullStdLib?: boolean;\n  stdLibURL?: string;\n  stdin?: () => string;\n  stdout?: (msg: string) => void;\n  stderr?: (msg: string) => void;\n  jsglobals?: object;\n  args?: string[];\n  env?: {\n    [key: string]: string;\n  };\n  packages?: string[];\n  pyproxyToStringRepr?: boolean;\n  enableRunUntilComplete?: boolean;\n  _node_mounts?: string[];\n  _makeSnapshot?: boolean;\n  _loadSnapshot?:\n    | Uint8Array\n    | ArrayBuffer\n    | PromiseLike<Uint8Array | ArrayBuffer>;\n}) => Promise<PyodideInterface> = (self as any).loadPyodide;\n\nloadPyodide().then((pyodide) => {\n  pyodide.setStdin({ stdin: handleStdinRequest });\n  pyodide.setStdout({ write: handleStdoutRequest });\n  pyodide.setStderr({ write: handleStderrRequest });\n  resolvePyodideProm(pyodide);\n}, rejectPyodideProm);\n\nfunction handleStdinRequest(): string {\n  if (stdinBusBuffer === undefined) {\n    throw new Error(\"Called handleStdinRequest before stdinBusBuffer was set.\");\n  }\n\n  while (true) {\n    const indexOfFirstNewline = stdin.indexOf(\"\\n\");\n    if (indexOfFirstNewline !== -1) {\n      const line = stdin.slice(0, indexOfFirstNewline + 1);\n      stdin = stdin.slice(indexOfFirstNewline + 1);\n      return line;\n    }\n\n    setWaitingFlag();\n    typesafePostMessage({ kind: MessageFromPyodideWorkerKind.StdinRequest });\n    waitUntilMainThreadUnsetsWaitingFlag();\n\n    const byteLength = new Uint32Array(stdinBusBuffer)[0];\n    const newInputBytes = new Uint8Array(stdinBusBuffer, 4, byteLength).slice();\n    Atomics.store(new Uint32Array(stdinBusBuffer), 0, 0);\n    const newInputString = new TextDecoder().decode(newInputBytes);\n    stdin += newInputString;\n  }\n}\n\nfunction handleStdoutRequest(output: Uint8Array): number {\n  if (stdinBusBuffer === undefined) {\n    throw new Error(\n      \"Called handleStdoutRequest before stdinBusBuffer was set.\"\n    );\n  }\n\n  const outputLength = output.length;\n\n  setWaitingFlag();\n  typesafePostMessage({\n    kind: MessageFromPyodideWorkerKind.StdoutUpdate,\n    output,\n  });\n  waitUntilMainThreadUnsetsWaitingFlag();\n\n  return outputLength;\n}\n\nfunction handleStderrRequest(output: Uint8Array): number {\n  if (stdinBusBuffer === undefined) {\n    throw new Error(\n      \"Called handleStderrRequest before stdinBusBuffer was set.\"\n    );\n  }\n\n  const outputLength = output.length;\n\n  setWaitingFlag();\n  typesafePostMessage({\n    kind: MessageFromPyodideWorkerKind.StderrUpdate,\n    output,\n  });\n  waitUntilMainThreadUnsetsWaitingFlag();\n\n  return outputLength;\n}\n\nfunction typesafePostMessage(message: MessageFromPyodideWorker): void {\n  self.postMessage(message);\n}\n"],"names":["MessageToPyodideWorkerKind","PyodideWorkerSignalCode","InterruptSignalCode","MessageFromPyodideWorkerKind","OVERRIDDEN_EXIT_ERR_MSG","resolvePyodideProm","Error","rejectPyodideProm","error","pyodideProm","Promise","resolve","reject","stdinBusBuffer","locals","stdin","setWaitingFlag","waitUntilMainThreadUnsetsWaitingFlag","clearInterruptSignal","checkInterruptSignal","self","onmessage","event","data","kind","SetSharedBuffers","then","pyodide","waitBuffer","Atomics","store","Int32Array","Waiting","wait","interruptBuffer","setInterruptBuffer","NoInterrupt","checkInterrupt","registerJsModule","print_info","handleStdoutRequest","TextEncoder","encode","concat","typesafePostMessage","WorkerReady","Run","_locals","overriddenExit","toString","toPy","exit","runPython","code","ExecutionSucceeded","String","includes","OverriddenExitCalled","ExecutionError","errorString","importScripts","handleStdinRequest","undefined","indexOfFirstNewline","indexOf","line","slice","StdinRequest","byteLength","Uint32Array","newInputBytes","Uint8Array","newInputString","TextDecoder","decode","output","outputLength","length","StdoutUpdate","handleStderrRequest","StderrUpdate","message","postMessage","loadPyodide","setStdin","setStdout","write","setStderr"],"sourceRoot":""}