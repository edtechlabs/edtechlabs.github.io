(()=>{"use strict";let e=function(e){return e.Run="run",e.SetSharedBuffers="setSharedBuffers",e}({}),t=function(e){return e[e.Waiting=0]="Waiting",e[e.Ready=1]="Ready",e}({}),r=function(e){return e[e.NoInterrupt=0]="NoInterrupt",e[e.Sigint=2]="Sigint",e}({}),n=function(e){return e.WorkerReady="workerReady",e.ExecutionSucceeded="executionSucceeded",e.ExecutionError="executionError",e.StdinRequest="stdinRequest",e.StdoutUpdate="stdoutUpdate",e.StderrUpdate="stderrUpdate",e}({}),i=()=>{throw new Error("resolvePyodideProm was called before it was set by the Promise callback.")},o=e=>{throw e};const d=new Promise(((e,t)=>{i=e,o=t}));let s,u="",c=()=>{},a=()=>{},f=()=>{},w=()=>{};self.onmessage=i=>{const{data:o}=i;if(o.kind===e.SetSharedBuffers)return void d.then((e=>{s=o.stdinBusBuffer;const{waitBuffer:i}=o;c=()=>{Atomics.store(new Int32Array(i),0,t.Waiting)},a=()=>{Atomics.wait(new Int32Array(i),0,t.Waiting),w()};const{interruptBuffer:d}=o;e.setInterruptBuffer(new Int32Array(d)),f=()=>{Atomics.store(new Int32Array(d),0,r.NoInterrupt)},w=()=>{e.checkInterrupt()},p({kind:n.WorkerReady})}));if(o.kind===e.Run)return u="",f(),void d.then((e=>{try{e.runPython(o.code),p({kind:n.ExecutionSucceeded})}catch(t){p({kind:n.ExecutionError,errorString:String(t)})}}))},self.importScripts("/pyodide_0.26.1/pyodide.js");function l(){if(void 0===s)throw new Error("Called handleStdinRequest before stdinBusBuffer was set.");for(;;){const e=u.indexOf("\n");if(-1!==e){const t=u.slice(0,e+1);return u=u.slice(e+1),t}c(),p({kind:n.StdinRequest}),a();const t=new Uint32Array(s)[0],r=new Uint8Array(s,4,t).slice();Atomics.store(new Uint32Array(s),0,0);const i=(new TextDecoder).decode(r);u+=i}}function S(e){if(void 0===s)throw new Error("Called handleStdoutRequest before stdinBusBuffer was set.");const t=e.length;return c(),p({kind:n.StdoutUpdate,output:e}),a(),t}function h(e){if(void 0===s)throw new Error("Called handleStderrRequest before stdinBusBuffer was set.");const t=e.length;return c(),p({kind:n.StderrUpdate,output:e}),a(),t}function p(e){self.postMessage(e)}(0,self.loadPyodide)().then((e=>{e.setStdin({stdin:l}),e.setStdout({write:S}),e.setStderr({write:h}),i(e)}),o)})();
//# sourceMappingURL=271.cd7ec8ea.chunk.js.map