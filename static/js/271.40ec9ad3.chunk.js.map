{"version":3,"file":"static/js/271.40ec9ad3.chunk.js","mappings":"mBAAO,IAAKA,EAA0B,SAA1BA,GAA0B,OAA1BA,EAA0B,UAA1BA,EAA0B,kCAA1BA,CAA0B,MAK1BC,EAAuB,SAAvBA,GAAuB,OAAvBA,EAAAA,EAAuB,qBAAvBA,EAAAA,EAAuB,iBAAvBA,CAAuB,MAiBvBC,EAA4B,SAA5BA,GAA4B,OAA5BA,EAA4B,0BAA5BA,EAA4B,cAA5BA,EAA4B,4BAA5BA,EAA4B,4BAA5BA,EAA4B,4BAA5BA,CAA4B,MCTpCC,EAA0DA,KAC5D,MAAM,IAAIC,MACR,2EACD,EAECC,EAA6CC,IAC/C,MAAMA,CAAK,EAEb,MAAMC,EAAyC,IAAIC,SACjD,CAACC,EAASC,KACRP,EAAqBM,EACrBJ,EAAoBK,CAAM,IAI9B,IAEIC,EAFAC,EAAQ,GAIZC,KAAKC,UAAaC,IAChB,MAAM,KAAEC,GAASD,EAEjB,GAAIC,EAAKC,OAASjB,EAA2BkB,gBAK3C,YAJAX,EAAYY,MAAK,KACfR,EAAeK,EAAKL,aACpBS,EAAoB,CAAEH,KAAMf,EAA6BmB,aAAc,IAK3E,GAAIL,EAAKC,OAASjB,EAA2BsB,IAY3C,OAXAV,EAAQ,QACRL,EAAYY,MAAMI,IAChB,IACEA,EAAQC,UAAUR,EAAKS,KACzB,CAAE,MAAOnB,GACPc,EAAoB,CAClBH,KAAMf,EAA6BE,MACnCsB,YAAaC,OAAOrB,IAExB,IAMoC,EAGzCO,KAAae,cACa,8BAmC3B,SAASC,IACP,QAAqBC,IAAjBnB,EACF,MAAM,IAAIP,MAAM,0DAGlB,OAAa,CACX,MAAM2B,EAAsBnB,EAAMoB,QAAQ,MAC1C,IAA6B,IAAzBD,EAA4B,CAC9B,MAAME,EAAOrB,EAAMsB,MAAM,EAAGH,EAAsB,GAElD,OADAnB,EAAQA,EAAMsB,MAAMH,EAAsB,GACnCE,CACT,CAEA,MAAME,EAAS,IAAIC,WAAWzB,GAC9B0B,QAAQC,MAAMH,EAAQ,EAAGlC,EAAwBsC,SACjDnB,EAAoB,CAAEH,KAAMf,EAA6BsC,eACzDH,QAAQI,KAAKN,EAAQ,EAAGlC,EAAwBsC,SAEhD,MAAMG,EAAa,IAAIC,YAAYhC,GAAc,GAC3CiC,EAAgB,IAAIC,WAAWlC,EAAc,EAAG+B,GAChDI,GAAiB,IAAIC,aAAcC,OAAOJ,EAAcV,SAC9DtB,GAASkC,CACX,CACF,CAEA,SAASG,EAAoBC,GAC3B,QAAqBpB,IAAjBnB,EACF,MAAM,IAAIP,MAAM,2DAGlB,MAAM+C,EAAeD,EAAOE,OAEtBjB,EAAS,IAAIC,WAAWzB,GAQ9B,OAPA0B,QAAQC,MAAMH,EAAQ,EAAGlC,EAAwBsC,SACjDnB,EAAoB,CAClBH,KAAMf,EAA6BmD,aACnCH,WAEFb,QAAQI,KAAKN,EAAQ,EAAGlC,EAAwBsC,SAEzCY,CACT,CAEA,SAASG,EAAoBJ,GAC3B,QAAqBpB,IAAjBnB,EACF,MAAM,IAAIP,MAAM,2DAGlB,MAAM+C,EAAeD,EAAOE,OAEtBjB,EAAS,IAAIC,WAAWzB,GAQ9B,OAPA0B,QAAQC,MAAMH,EAAQ,EAAGlC,EAAwBsC,SACjDnB,EAAoB,CAClBH,KAAMf,EAA6BqD,aACnCL,WAEFb,QAAQI,KAAKN,EAAQ,EAAGlC,EAAwBsC,SAEzCY,CACT,CAEA,SAAS/B,EAAoBoC,GAC3B3C,KAAK4C,YAAYD,EACnB,EAtEAE,EAFmC7C,KAAa6C,eAElCvC,MAAMI,IAClBA,EAAQoC,SAAS,CAAE/C,MAAOiB,IAC1BN,EAAQqC,UAAU,CAAEC,MAAOZ,IAC3B1B,EAAQuC,UAAU,CAAED,MAAOP,IAC3BnD,EAAmBoB,EAAQ,GAC1BlB,E","sources":["workerMessage.ts","workers/pyodideWorker.ts"],"sourcesContent":["export enum MessageToPyodideWorkerKind {\n  Run = \"run\",\n  SetSharedBuffer = \"setSharedBuffer\",\n}\n\nexport enum PyodideWorkerSignalCode {\n  Waiting = 0,\n  Ready = 1,\n}\n\nexport type MessageToPyodideWorker = RunMessage | SetSharedBufferMessage;\n\nexport interface RunMessage {\n  readonly kind: MessageToPyodideWorkerKind.Run;\n  readonly code: string;\n}\n\nexport interface SetSharedBufferMessage {\n  readonly kind: MessageToPyodideWorkerKind.SetSharedBuffer;\n  readonly sharedBuffer: SharedArrayBuffer;\n}\n\nexport enum MessageFromPyodideWorkerKind {\n  WorkerReady = \"workerReady\",\n  Error = \"error\",\n  StdinRequest = \"stdinRequest\",\n  StdoutUpdate = \"stdoutUpdate\",\n  StderrUpdate = \"stderrUpdate\",\n}\n\nexport type MessageFromPyodideWorker =\n  | WorkerReadyMessage\n  | ExecutionErrorMessage\n  | StdinRequestMessage\n  | StdoutUpdateMessage\n  | StderrUpdateMessage;\n\nexport interface WorkerReadyMessage {\n  readonly kind: MessageFromPyodideWorkerKind.WorkerReady;\n}\n\nexport interface ExecutionErrorMessage {\n  readonly kind: MessageFromPyodideWorkerKind.Error;\n  readonly errorString: string;\n}\n\nexport interface StdinRequestMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StdinRequest;\n}\n\nexport interface StdoutUpdateMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StdoutUpdate;\n  readonly output: Uint8Array;\n}\n\nexport interface StderrUpdateMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StderrUpdate;\n  readonly output: Uint8Array;\n}\n","import type { PyodideInterface } from \"pyodide\";\nimport {\n  MessageFromPyodideWorker,\n  MessageFromPyodideWorkerKind,\n  MessageToPyodideWorker,\n  MessageToPyodideWorkerKind,\n  PyodideWorkerSignalCode,\n} from \"../workerMessage\";\n\nexport {};\n\n/* eslint-disable no-restricted-globals */\n\nlet resolvePyodideProm: (pyodide: PyodideInterface) => void = () => {\n  throw new Error(\n    \"resolvePyodideProm was called before it was set by the Promise callback.\"\n  );\n};\nlet rejectPyodideProm: (error: Error) => void = (error) => {\n  throw error;\n};\nconst pyodideProm: Promise<PyodideInterface> = new Promise(\n  (resolve, reject) => {\n    resolvePyodideProm = resolve;\n    rejectPyodideProm = reject;\n  }\n);\n\nlet stdin = \"\";\n\nlet sharedBuffer: undefined | SharedArrayBuffer;\n\nself.onmessage = (event: MessageEvent<MessageToPyodideWorker>): void => {\n  const { data } = event;\n\n  if (data.kind === MessageToPyodideWorkerKind.SetSharedBuffer) {\n    pyodideProm.then(() => {\n      sharedBuffer = data.sharedBuffer;\n      typesafePostMessage({ kind: MessageFromPyodideWorkerKind.WorkerReady });\n    });\n    return;\n  }\n\n  if (data.kind === MessageToPyodideWorkerKind.Run) {\n    stdin = \"\";\n    pyodideProm.then((pyodide) => {\n      try {\n        pyodide.runPython(data.code);\n      } catch (error) {\n        typesafePostMessage({\n          kind: MessageFromPyodideWorkerKind.Error,\n          errorString: String(error),\n        });\n      }\n    });\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const _exhaustivenessCheck: never = data;\n};\n\n(self as any).importScripts(\n  process.env.PUBLIC_URL + \"/pyodide_0.26.1/pyodide.js\"\n);\n\nconst loadPyodide: (options?: {\n  indexURL?: string;\n  packageCacheDir?: string;\n  lockFileURL?: string;\n  fullStdLib?: boolean;\n  stdLibURL?: string;\n  stdin?: () => string;\n  stdout?: (msg: string) => void;\n  stderr?: (msg: string) => void;\n  jsglobals?: object;\n  args?: string[];\n  env?: {\n    [key: string]: string;\n  };\n  packages?: string[];\n  pyproxyToStringRepr?: boolean;\n  enableRunUntilComplete?: boolean;\n  _node_mounts?: string[];\n  _makeSnapshot?: boolean;\n  _loadSnapshot?:\n    | Uint8Array\n    | ArrayBuffer\n    | PromiseLike<Uint8Array | ArrayBuffer>;\n}) => Promise<PyodideInterface> = (self as any).loadPyodide;\n\nloadPyodide().then((pyodide) => {\n  pyodide.setStdin({ stdin: handleStdinRequest });\n  pyodide.setStdout({ write: handleStdoutRequest });\n  pyodide.setStderr({ write: handleStderrRequest });\n  resolvePyodideProm(pyodide);\n}, rejectPyodideProm);\n\nfunction handleStdinRequest(): string {\n  if (sharedBuffer === undefined) {\n    throw new Error(\"Called handleStdinRequest before sharedBuffer was set.\");\n  }\n\n  while (true) {\n    const indexOfFirstNewline = stdin.indexOf(\"\\n\");\n    if (indexOfFirstNewline !== -1) {\n      const line = stdin.slice(0, indexOfFirstNewline + 1);\n      stdin = stdin.slice(indexOfFirstNewline + 1);\n      return line;\n    }\n\n    const i32arr = new Int32Array(sharedBuffer);\n    Atomics.store(i32arr, 0, PyodideWorkerSignalCode.Waiting);\n    typesafePostMessage({ kind: MessageFromPyodideWorkerKind.StdinRequest });\n    Atomics.wait(i32arr, 0, PyodideWorkerSignalCode.Waiting);\n\n    const byteLength = new Uint32Array(sharedBuffer)[1];\n    const newInputBytes = new Uint8Array(sharedBuffer, 8, byteLength);\n    const newInputString = new TextDecoder().decode(newInputBytes.slice());\n    stdin += newInputString;\n  }\n}\n\nfunction handleStdoutRequest(output: Uint8Array): number {\n  if (sharedBuffer === undefined) {\n    throw new Error(\"Called handleStdoutRequest before sharedBuffer was set.\");\n  }\n\n  const outputLength = output.length;\n\n  const i32arr = new Int32Array(sharedBuffer);\n  Atomics.store(i32arr, 0, PyodideWorkerSignalCode.Waiting);\n  typesafePostMessage({\n    kind: MessageFromPyodideWorkerKind.StdoutUpdate,\n    output,\n  });\n  Atomics.wait(i32arr, 0, PyodideWorkerSignalCode.Waiting);\n\n  return outputLength;\n}\n\nfunction handleStderrRequest(output: Uint8Array): number {\n  if (sharedBuffer === undefined) {\n    throw new Error(\"Called handleStderrRequest before sharedBuffer was set.\");\n  }\n\n  const outputLength = output.length;\n\n  const i32arr = new Int32Array(sharedBuffer);\n  Atomics.store(i32arr, 0, PyodideWorkerSignalCode.Waiting);\n  typesafePostMessage({\n    kind: MessageFromPyodideWorkerKind.StderrUpdate,\n    output,\n  });\n  Atomics.wait(i32arr, 0, PyodideWorkerSignalCode.Waiting);\n\n  return outputLength;\n}\n\nfunction typesafePostMessage(message: MessageFromPyodideWorker): void {\n  self.postMessage(message);\n}\n"],"names":["MessageToPyodideWorkerKind","PyodideWorkerSignalCode","MessageFromPyodideWorkerKind","resolvePyodideProm","Error","rejectPyodideProm","error","pyodideProm","Promise","resolve","reject","sharedBuffer","stdin","self","onmessage","event","data","kind","SetSharedBuffer","then","typesafePostMessage","WorkerReady","Run","pyodide","runPython","code","errorString","String","importScripts","handleStdinRequest","undefined","indexOfFirstNewline","indexOf","line","slice","i32arr","Int32Array","Atomics","store","Waiting","StdinRequest","wait","byteLength","Uint32Array","newInputBytes","Uint8Array","newInputString","TextDecoder","decode","handleStdoutRequest","output","outputLength","length","StdoutUpdate","handleStderrRequest","StderrUpdate","message","postMessage","loadPyodide","setStdin","setStdout","write","setStderr"],"sourceRoot":""}