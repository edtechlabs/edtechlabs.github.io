(()=>{"use strict";let e=function(e){return e.Run="run",e.SetSharedBuffer="setSharedBuffer",e}({}),t=function(e){return e[e.Waiting=0]="Waiting",e[e.Ready=1]="Ready",e}({}),r=function(e){return e.WorkerReady="workerReady",e.Error="error",e.StdinRequest="stdinRequest",e.StdoutUpdate="stdoutUpdate",e.StderrUpdate="stderrUpdate",e}({}),n=()=>{throw new Error("resolvePyodideProm was called before it was set by the Promise callback.")},i=e=>{throw e};const o=new Promise(((e,t)=>{n=e,i=t}));let d,s="";self.onmessage=t=>{const{data:n}=t;if(n.kind===e.SetSharedBuffer)return void o.then((()=>{d=n.sharedBuffer,c({kind:r.WorkerReady})}));if(n.kind===e.Run)return s="",void o.then((e=>{try{e.runPython(n.code)}catch(t){c({kind:r.Error,errorString:String(t)})}}))},self.importScripts("/pyodide_0.26.1/pyodide.js");function a(){if(void 0===d)throw new Error("Called handleStdinRequest before sharedBuffer was set.");for(;;){const e=s.indexOf("\n");if(-1!==e){const t=s.slice(0,e+1);return s=s.slice(e+1),t}const n=new Int32Array(d);Atomics.store(n,0,t.Waiting),c({kind:r.StdinRequest}),Atomics.wait(n,0,t.Waiting);const i=new Uint32Array(d)[1],o=new Uint8Array(d,8,i),a=(new TextDecoder).decode(o.slice());s+=a}}function u(e){if(void 0===d)throw new Error("Called handleStdoutRequest before sharedBuffer was set.");const n=e.length,i=new Int32Array(d);return Atomics.store(i,0,t.Waiting),c({kind:r.StdoutUpdate,output:e}),Atomics.wait(i,0,t.Waiting),n}function f(e){if(void 0===d)throw new Error("Called handleStderrRequest before sharedBuffer was set.");const n=e.length,i=new Int32Array(d);return Atomics.store(i,0,t.Waiting),c({kind:r.StderrUpdate,output:e}),Atomics.wait(i,0,t.Waiting),n}function c(e){self.postMessage(e)}(0,self.loadPyodide)().then((e=>{e.setStdin({stdin:a}),e.setStdout({write:u}),e.setStderr({write:f}),n(e)}),i)})();
//# sourceMappingURL=271.40ec9ad3.chunk.js.map