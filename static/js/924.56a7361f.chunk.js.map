{"version":3,"file":"static/js/924.56a7361f.chunk.js","mappings":"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","sources":["workerMessage.ts","workers/pyodideWorker.ts","version.ts"],"sourcesContent":["export enum MessageToPyodideWorkerKind {\n  Run = \"run\",\n  SetSharedBuffers = \"setSharedBuffers\",\n}\n\nexport enum PyodideWorkerSignalCode {\n  Waiting = 0,\n  Ready = 1,\n}\n\nexport enum InterruptSignalCode {\n  NoInterrupt = 0,\n  Sigint = 2,\n}\n\nexport type MessageToPyodideWorker = RunMessage | SetSharedBuffersMessage;\n\nexport interface RunMessage {\n  readonly kind: MessageToPyodideWorkerKind.Run;\n  readonly code: string;\n}\n\nexport interface SetSharedBuffersMessage {\n  readonly kind: MessageToPyodideWorkerKind.SetSharedBuffers;\n  readonly stdinBusBuffer: SharedArrayBuffer;\n  readonly waitBuffer: SharedArrayBuffer;\n  readonly interruptBuffer: SharedArrayBuffer;\n}\n\nexport enum MessageFromPyodideWorkerKind {\n  WorkerReady = \"workerReady\",\n  ExecutionSucceeded = \"executionSucceeded\",\n  ExecutionError = \"executionError\",\n  StdinRequest = \"stdinRequest\",\n  StdoutUpdate = \"stdoutUpdate\",\n  StderrUpdate = \"stderrUpdate\",\n}\n\nexport type MessageFromPyodideWorker =\n  | WorkerReadyMessage\n  | ExecutionSucceededMessage\n  | ExecutionErrorMessage\n  | StdinRequestMessage\n  | StdoutUpdateMessage\n  | StderrUpdateMessage;\n\nexport interface WorkerReadyMessage {\n  readonly kind: MessageFromPyodideWorkerKind.WorkerReady;\n}\n\nexport interface ExecutionSucceededMessage {\n  readonly kind: MessageFromPyodideWorkerKind.ExecutionSucceeded;\n}\n\nexport interface ExecutionErrorMessage {\n  readonly kind: MessageFromPyodideWorkerKind.ExecutionError;\n  readonly errorString: string;\n}\n\nexport interface StdinRequestMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StdinRequest;\n}\n\nexport interface StdoutUpdateMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StdoutUpdate;\n  readonly output: Uint8Array;\n}\n\nexport interface StderrUpdateMessage {\n  readonly kind: MessageFromPyodideWorkerKind.StderrUpdate;\n  readonly output: Uint8Array;\n}\n","import type { PyodideInterface } from \"pyodide\";\nimport {\n  InterruptSignalCode,\n  MessageFromPyodideWorker,\n  MessageFromPyodideWorkerKind,\n  MessageToPyodideWorker,\n  MessageToPyodideWorkerKind,\n  PyodideWorkerSignalCode,\n} from \"../workerMessage\";\nimport { KOJA_VERSION_WITHOUT_V } from \"../version\";\n\nexport {};\n\n/* eslint-disable no-restricted-globals */\n\nlet resolvePyodideProm: (pyodide: PyodideInterface) => void = () => {\n  throw new Error(\n    \"resolvePyodideProm was called before it was set by the Promise callback.\"\n  );\n};\nlet rejectPyodideProm: (error: Error) => void = (error) => {\n  throw error;\n};\nconst pyodideProm: Promise<PyodideInterface> = new Promise(\n  (resolve, reject) => {\n    resolvePyodideProm = resolve;\n    rejectPyodideProm = reject;\n  }\n);\n\nlet stdin = \"\";\n\nlet stdinBusBuffer: undefined | SharedArrayBuffer;\n\nlet setWaitingFlag: () => void = () => {};\nlet waitUntilMainThreadUnsetsWaitingFlag: () => void = () => {};\n\nlet clearInterruptSignal: () => void = () => {};\nlet checkInterruptSignal: () => void = () => {};\n\nself.onmessage = (event: MessageEvent<MessageToPyodideWorker>): void => {\n  const { data } = event;\n\n  if (data.kind === MessageToPyodideWorkerKind.SetSharedBuffers) {\n    pyodideProm.then((pyodide) => {\n      stdinBusBuffer = data.stdinBusBuffer;\n\n      const { waitBuffer } = data;\n      setWaitingFlag = () => {\n        Atomics.store(\n          new Int32Array(waitBuffer),\n          0,\n          PyodideWorkerSignalCode.Waiting\n        );\n      };\n      waitUntilMainThreadUnsetsWaitingFlag = () => {\n        Atomics.wait(\n          new Int32Array(waitBuffer),\n          0,\n          PyodideWorkerSignalCode.Waiting\n        );\n        checkInterruptSignal();\n      };\n\n      const { interruptBuffer } = data;\n      pyodide.setInterruptBuffer(new Int32Array(interruptBuffer));\n      clearInterruptSignal = () => {\n        Atomics.store(\n          new Int32Array(interruptBuffer),\n          0,\n          InterruptSignalCode.NoInterrupt\n        );\n      };\n      checkInterruptSignal = () => {\n        pyodide.checkInterrupt();\n      };\n\n      pyodide.registerJsModule(\"js\", {});\n      pyodide.registerJsModule(\"pyodide_js\", {});\n      pyodide.registerJsModule(\"koja\", {\n        print_info: () => {\n          handleStdoutRequest(\n            new TextEncoder().encode(\n              `Koja v${KOJA_VERSION_WITHOUT_V}\\nCopyright 2024 Kyle Lin.\\n`\n            )\n          );\n        },\n      });\n\n      typesafePostMessage({ kind: MessageFromPyodideWorkerKind.WorkerReady });\n    });\n    return;\n  }\n\n  if (data.kind === MessageToPyodideWorkerKind.Run) {\n    stdin = \"\";\n\n    clearInterruptSignal();\n\n    pyodideProm.then((pyodide) => {\n      try {\n        pyodide.runPython(data.code);\n        typesafePostMessage({\n          kind: MessageFromPyodideWorkerKind.ExecutionSucceeded,\n        });\n      } catch (error) {\n        typesafePostMessage({\n          kind: MessageFromPyodideWorkerKind.ExecutionError,\n          errorString: String(error),\n        });\n      }\n    });\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const _exhaustivenessCheck: never = data;\n};\n\n(self as any).importScripts(\n  process.env.PUBLIC_URL + \"/pyodide_0.26.1/pyodide.js\"\n);\n\nconst loadPyodide: (options?: {\n  indexURL?: string;\n  packageCacheDir?: string;\n  lockFileURL?: string;\n  fullStdLib?: boolean;\n  stdLibURL?: string;\n  stdin?: () => string;\n  stdout?: (msg: string) => void;\n  stderr?: (msg: string) => void;\n  jsglobals?: object;\n  args?: string[];\n  env?: {\n    [key: string]: string;\n  };\n  packages?: string[];\n  pyproxyToStringRepr?: boolean;\n  enableRunUntilComplete?: boolean;\n  _node_mounts?: string[];\n  _makeSnapshot?: boolean;\n  _loadSnapshot?:\n    | Uint8Array\n    | ArrayBuffer\n    | PromiseLike<Uint8Array | ArrayBuffer>;\n}) => Promise<PyodideInterface> = (self as any).loadPyodide;\n\nloadPyodide().then((pyodide) => {\n  pyodide.setStdin({ stdin: handleStdinRequest });\n  pyodide.setStdout({ write: handleStdoutRequest });\n  pyodide.setStderr({ write: handleStderrRequest });\n  resolvePyodideProm(pyodide);\n}, rejectPyodideProm);\n\nfunction handleStdinRequest(): string {\n  if (stdinBusBuffer === undefined) {\n    throw new Error(\"Called handleStdinRequest before stdinBusBuffer was set.\");\n  }\n\n  while (true) {\n    const indexOfFirstNewline = stdin.indexOf(\"\\n\");\n    if (indexOfFirstNewline !== -1) {\n      const line = stdin.slice(0, indexOfFirstNewline + 1);\n      stdin = stdin.slice(indexOfFirstNewline + 1);\n      return line;\n    }\n\n    setWaitingFlag();\n    typesafePostMessage({ kind: MessageFromPyodideWorkerKind.StdinRequest });\n    waitUntilMainThreadUnsetsWaitingFlag();\n\n    const byteLength = new Uint32Array(stdinBusBuffer)[0];\n    const newInputBytes = new Uint8Array(stdinBusBuffer, 4, byteLength).slice();\n    Atomics.store(new Uint32Array(stdinBusBuffer), 0, 0);\n    const newInputString = new TextDecoder().decode(newInputBytes);\n    stdin += newInputString;\n  }\n}\n\nfunction handleStdoutRequest(output: Uint8Array): number {\n  if (stdinBusBuffer === undefined) {\n    throw new Error(\n      \"Called handleStdoutRequest before stdinBusBuffer was set.\"\n    );\n  }\n\n  const outputLength = output.length;\n\n  setWaitingFlag();\n  typesafePostMessage({\n    kind: MessageFromPyodideWorkerKind.StdoutUpdate,\n    output,\n  });\n  waitUntilMainThreadUnsetsWaitingFlag();\n\n  return outputLength;\n}\n\nfunction handleStderrRequest(output: Uint8Array): number {\n  if (stdinBusBuffer === undefined) {\n    throw new Error(\n      \"Called handleStderrRequest before stdinBusBuffer was set.\"\n    );\n  }\n\n  const outputLength = output.length;\n\n  setWaitingFlag();\n  typesafePostMessage({\n    kind: MessageFromPyodideWorkerKind.StderrUpdate,\n    output,\n  });\n  waitUntilMainThreadUnsetsWaitingFlag();\n\n  return outputLength;\n}\n\nfunction typesafePostMessage(message: MessageFromPyodideWorker): void {\n  self.postMessage(message);\n}\n","export const KOJA_VERSION_WITHOUT_V = \"1.0.7\";\n"],"names":["MessageToPyodideWorkerKind","PyodideWorkerSignalCode","InterruptSignalCode","MessageFromPyodideWorkerKind","resolvePyodideProm","Error","rejectPyodideProm","error","pyodideProm","Promise","resolve","reject","stdinBusBuffer","stdin","setWaitingFlag","waitUntilMainThreadUnsetsWaitingFlag","clearInterruptSignal","checkInterruptSignal","self","onmessage","event","data","kind","SetSharedBuffers","then","pyodide","waitBuffer","Atomics","store","Int32Array","Waiting","wait","interruptBuffer","setInterruptBuffer","NoInterrupt","checkInterrupt","registerJsModule","print_info","handleStdoutRequest","TextEncoder","encode","concat","typesafePostMessage","WorkerReady","Run","runPython","code","ExecutionSucceeded","ExecutionError","errorString","String","importScripts","handleStdinRequest","undefined","indexOfFirstNewline","indexOf","line","slice","StdinRequest","byteLength","Uint32Array","newInputBytes","Uint8Array","newInputString","TextDecoder","decode","output","outputLength","length","StdoutUpdate","handleStderrRequest","StderrUpdate","message","postMessage","loadPyodide","setStdin","setStdout","write","setStderr"],"sourceRoot":""}